extends ARGroup

enum EnemyCategory {
	small,
	big
}

var rng = RandomNumberGenerator.new()
var total_time: float
var enemiesCount: int = 30
var enemies: Array
var boss
var pause: bool = false
var current_second = 0

func start():
	rng.randomize()
	for i in range(1, enemiesCount + 1):
		enemies.append(get_ar_element("Enemy" + str(i)))
		enemies[i].start()
	boss = get_ar_element("Boss")
	api("out", boss)
	boss.start()
	current_second = 0
	total_time = 178.0

func update_process(delta: float):
	if pause:
		return
	total_time += delta
	tryToSpawn()

func tryToSpawn():
	if total_time - float(current_second) < 2.0:
		return
	if not boss.visibility:
		spawn()
	current_second += 2
	if current_second == 180:
		spawnBoss()

func spawnBoss():
	if boss.visibility:
		return
	boss.spawn(2)

func spawn():
	var categories = game_path[current_second]
	# api("out", "Spawned enemy with index: " + str(enemy_index) + ", category: " + str(category))
	for category in range(len(categories)):
		for i in range(categories[category]):
			for j in range(0, enemiesCount):
				if enemies[j].visibility:
					continue
				enemies[j].spawn(category)
				break
	
func decrease_speed_of_all_enemies(percentile, time):
	for enemy in enemies:
		enemy.const_time_of_increase = 10.0
		enemy.timer_of_increase = 10.0
		enemy.percentile_of_increase = percentile
	boss.const_time_of_increase = 10.0
	boss.timer_of_increase = 10.0
	boss.percentile_of_increase = percentile

func get_nearest_to_player_enemy():
	var min_dist: float = 100000.0
	var min_index: int = -1
	for i in range(0, enemiesCount):
		if enemies[i].active and enemies[i].distance_to_player < min_dist:
			min_dist = enemies[i].distance_to_player
			min_index = i
	if boss.active and boss.distance_to_player < min_dist:
		return boss
	if min_index == -1:
		return null
	return enemies[min_index]

func set_pause(value: bool):
	pause = value
	for i in range(0, enemiesCount):
		enemies[i].set_pause(value)

var game_path = {
	0: [4, 0],
	2: [1, 0],
	4: [2, 0],
	6: [1, 0],
	8: [3, 0],
	10: [2, 0],
	12: [3, 0],
	14: [1, 0],
	16: [2, 0],
	18: [1, 0],
	20: [3, 0],
	22: [1, 0],
	24: [3, 0],
	26: [1, 0],
	28: [3, 0],
	30: [1, 0],
	32: [2, 0],
	34: [4, 0],
	36: [1, 0],
	38: [3, 0],
	40: [1, 1],
	42: [1, 0],
	44: [3, 1],
	46: [1, 0],
	48: [2, 2],
	50: [1, 0],
	52: [1, 0],
	54: [2, 1],
	56:  [1, 0],
	58: [1, 0],
	60: [4, 5],
	62: [1, 0],
	64: [2, 1],
	66: [2, 0],
	68: [1, 2],
	70: [2, 0],
	72: [1, 2],
	74: [3, 0],
	76: [2, 2],
	78: [1, 0],
	80: [4, 2],
	82: [2, 1],
	84: [5, 0],
	86: [1, 2],
	88: [2, 0],
	90: [1, 5],
	92: [6, 0],
	94: [5, 0],
	96: [1, 2],
	98: [2, 0],
	100: [1, 5],
	102: [6, 0],
	104: [1, 1],
	106: [1, 2],
	108: [6, 0],
	110: [1, 0],
	112: [1, 3],
	114: [3, 0],
	116: [1, 1],
	118: [1, 0],
	120: [0, 10],
	122: [2, 0],
	124: [2, 3],
	126: [3, 0],
	128: [2, 3],
	130: [5, 2],
	132: [2, 5],
	134: [5, 0],
	136: [3, 5],
	138: [3, 0],
	140: [2, 8],
	142: [2, 1],
	144: [2, 6],
	146: [4, 2],
	148: [0, 10],
	150: [5, 0],
	152: [3, 6],
	154: [5, 3],
	156: [0, 4],
	158: [0, 10],
	160: [0, 5],
	162: [0, 5],
	164: [0, 10],
	166: [0, 5],
	168: [0, 3],
	170: [0, 6],
	172: [0, 8],
	174: [0, 3],
	176: [0, 2],
	178: [0, 0]	
}